<?xml version="1.0" encoding="UTF-8"?>


<!-- HDDS: HALL D Geometric Detector Specification
     =============================================

     Version:   1
     Release:   0
     Date   :   April 10, 2000
     
     This dtd definition file defines the syntax for the
     Hall D Geometric Detector Specification xml files. 
     Documentation of the elements is given below.

     The basic structure of this document was borrowed
     from the AGGD project of the Atlas collaboration.


1) General structure of a detector description
   ===========================================

  o The HDDS element is the main container where all detector description
    information is maintained and managed. 

  o Currently one may find within the HDDS element :
      o materials   : definition of a set of materials
      o section     : definition of a section (main division of the detector)

  o The DTD provides a main version id. This corresponds to a constraint
    (named DTD_version). All "materials", "sections" and the overall "HDDS"
    element must individually specify in their attributes a matching DTD_version
    value. (eg. DTD_version="v4")

  o General rule for angle definition for all XML statements:

     a) Right handed coordinate system is used.
          Explicitly this means that:  
            Z-axis angle rotation should be positive when rotation is
              made in the direction from X to Y in the short way 
            Y-axis angle rotation should be positive when rotation is
              made in the direction from Z to X in the short way
            X-axis angle rotation should be positive when rotation is
              made in the direction from Y to Z in the short way
     b) All angles corresponds to "active" rotation, i.e. the object is rotated
        in the fixed coordinate system
        (NOT "passive" rotation when the axis are rotated and the object
         is fixed) 

1.1) Materials
===============

  o Materials can be elements or composites.
  o elements are identified using a long name. Attributes are

            symbol      : the conventional symbol name
            z           : mean number of protons
            a           : atomic weight
  o composites are identified using a long name and provide a density (g/ml).
    They are made of a set of addmaterial elements, each with attributes

            material     : an IDREF to an already defined material or element
            fractionmass : a percentage of this material in the composite 
                           (use for both materials and elements).
            natoms       : the number of atoms of this element in the composite
                           (elements only).  Use either natoms or fractionmass.
  o contents of elements and composites are a sequence of parameters with
    names taken from the following list.  Any element that is valid within
    a parameter block (see section 1.3) is allowed.

            density     : density 		     (g/cm^3)
            radlen      : radiation length           (g/cm^2)
            collen      : nuclear collision length   (g/cm^2)
            abslen      : nuclear interaction length (g/cm^2)
            dedx        : minimum-ionization dE/dx   (MeV.cm^2/g)

1.2) Sections
==============

  A section forms the basic sub-division of the entire detector. It
  holds the implementation of the geometry for this particular piece
  of detector. A section is primarily made of "volume" elements but
  also may receive a set of named and typed parameter blocks (used to specify
  constants).

  Attributes of section are :

            name        : (short) unique name to identify the section
            version     : internal version of the section
            date        : last modification date
            author      : last modification author
            top_volume  : envelope volume corresponding to the
                          section

1.3) Parameters
===============

  Parameters are named and typed values. Possible types are :

        int		 : an int value
        real             : a float value
        string           : a text string
        reference        : an IDREF to a parameter block.

        int_array        : an array of values
        real_array       : an array of values
        string_vector    : a vector of text strings
        reference_vector : a vector of IDREFs to parameter blocks.

  Parameters must be defined within named "parameter blocks" which in
  turn can be referenced by any volume. Parameter blocks are defined
  within sections.

  All scalar parameter get their value in the attribute named "value";
  array parameters get their array of values within the single
  attribute named "values"; vector parameters get their values as a
  set of member elements.

  It is required to specify a semantics for the values using a "unit"
  attribute (available for both scalar and arrays). Current possible
  units are:

     m cm mm              for lengths
     deg rad mrad 	  for angles
     percent              for fractions

   or simply

     none


  some examples are:

          <real name="chamber_width" value="12.56" unit="mm" />
          <string name="chamber_type"  value="RPC" />

          <real_array name="ratios" unit="percent" values="10 15 27 33" />

          <string_vector name="authors">
            <string_data value="Christian Arnault"/>
            <string_data value="Stan Bentvelsen"/>
            <string_data value="Jean-Francois Laporte"/>
            <string_data value="Steven Goldfarb"/>
            <string_data value="Marc Virchaux"/>
            <string_data value="Christopher Lester"/>
          </string_vector>


1.4) Volumes
============

  The 'volume' is a generic name for a geometric object. Effective
  volume are organized as a hierarchy of types.

        1) solid volume (have a "material" and may be "sensitive"))
           |-> box      3-rectangle
           |-> tubs	tube section
           |-> trd	trapezoid
           |-> pcon	poly-cone (sequence of joined cons)
           +-> cons 	cone section

        2) composition (build a logical composition)

        4) boolean volume
           |-> union
           |-> intersection
           +-> subtraction

        5) stack (pile up other volumes)
           |-> stackX
           |-> stackY
           +-> stackZ

  All kinds of volumes have at least the following attribute:

         name       : their identifier
         parameters : an IDREF to a parameter block.

  Parameter blocks are meant to describe non-geometrical information
  or geometrical details that cannot or should not be described using
  the generic model.

  For example, the inner-structure of the SCT cristals contain
  information about the strip-pitch, etc. The use and content of these
  parameters is left free.

  A volume in itself is not positioned. Rather, compositions, boolean
  volumes or stacks combine "position" elements which role is to
  position a volume (see paragraph on positions)
         

1.4.1) Solid volume:
====================

  A basic geometry unit; Specialized types provide for specific shapes
  (boxes, tube sections, trapezoids and cone sections). A solid
  references a material, and may be declared as "sensitive" (which
  opens the not-yet-implemented capability of producing hits).


1.4.1.1) Box (element tag "box") :

  A Box is a cuboid of given total lengths X,Y and Z. The Box is
  centered on the origin with sides parallel to the x/y/z axes.

  NB: Note the factor two difference in the dimensions wrt the 'Geant4 - Box'

  Its dimensions are given by :

                      X_Y_Z="X Y Z"

1.4.1.2) Trapezoid (element tag "trd") :

  A Trd is a trapezoid with the x and y dimensions varying along z. Its
  dimensions are given by

                      Xmp_Ymp_Z="Xm Xp Ym Yp Z" 
                      inclination="alph_xz alph_yz"

  with:
                      Xm    Length along x at the surface positioned at -Z/2
                      Xp    Length along x at the surface positioned at +Z/2
                      Ym    Length along y at the surface positioned at -Z/2
                      Yp    Length along y at the surface positioned at +Z/2
                      Z     Length along z axis

                      alph_xz  Inclination angle in the x-z plane
                      alph_yz  Inclination angle in the y-z plane

  NB: Note the factor two difference in the dimensions wrt the 'Geant4 - trd'

1.4.1.3) Tube segment (element tag "tubs")

  A tube or tube segment with curved sides parallel to the z-axis.
  The tube has a specified total-length along the z axis, about which
  it is centered, and a given minimum and maximum radius. A minimum
  radius of 0 signifies a filled tube / cylinder. The tube segment is
  specified by starting and delta angles for phi, with 0 being the +x
  axis, PI/2 the +y axis. A delta angle of 2PI signifies a complete,
  unsegmented tube/cylinder.  The origin is centered in the middle of
  the tube.

  Its dimensions are given by

                     Rio_Z="Ri Ro Z"
                     profile="PhiS dPhi"   (defaulted to "0 360") 

  with

                     Ri    Inner radius
                     Ro    Outer radius
                     Z     Total length in Z
                     PhiS  Starting angle phi
                     dPhi  Delta angle phi

  NB: Note the factor two difference in the length wrt the 'Geant4 - tubs'

1.4.1.4) Cone segment (element tag "cons")

  A cons is, in the general case, a Phi segment of a cone, with length
  Z, inner and outer radii specified at -Z/2 and +Z/2. The Phi segment
  is described by a starting Phi angle, and the +dPhi delta angle for
  the shape.

  Its dimensions are given by

                     Rio1_Rio2_Z="Ri1 Ro1 Ri2 Ro2 Z"
                     profile="PhiS dPhi"               (defaulted to "0 360") 

  with :

                     Ri1     inside radius at  -Z/2
                     Ri2     inside radius at  +Z/2
                     Ro1     outside radius at -Z/2
                     Ro2     outside radius at +Z/2
                     Z       half length in z
                     PhiS    Starting angle phi
                     dPhi    Delta angle phi


1.4.1.5) Polycone segment (element tag "pcon" )

  A pcon is, in the general case, a Phi segment of a polycone. The
  polycone is build from a series of consecutive cones.

  The phi-segment is given by the attribute
      
                     profile="PhiS dPhi"               (defaulted to "0 360") 

  with :

                     PhiS    Starting angle phi
                     dPhi    Delta angle phi

  The edges of the plycone are given by a series of XML element 'polyplane',
  which are children of 'pcon'. The 'polyplane' dimensions are given
  by the attribute:

                     Rio_Z="Ri Ro Z"

  with :

                     Ri     inside radius at  point Z
                     Ro     inside radius at  point Z
                     Z      position z



1.4.2) Composition
==================

  Construct a new volume which consists of positioning several volumes
  (defined elsewhere in HDDS) placed at various places w.r.t the
  reference frame of this new entity.

    The positioning of volumes proceeds via position elements:

        posXYZ
        posRPhiZ
        mposR
        mposPhi
        mposX
        mposY
        mposZ
  
  Volume are positionned according to the coordinates specified in the
  above positionning elements w.r.t the implicit coordinate system of
  the composition (which defines the reference)..

  In general, there is a priori no defined volume corresponding to
  this entity i.e. it is a juxtaposition of volumes. Its envelope has
  to be computed from the juxtaposed volumes. However one can force
  this envelope to be one specific (elswhere defined) volume.  Then
  all positioned volume will be placed into this "envelope" volume.

1.4.3) Stacks
=============

  Constructs a new volume which consists of several other volumes
  piled up along one given axis.

   Stacks may be defined along
     the X axis (element tag "stackX")
     the Y axis (element tag "stackY")
     the Z axis (element tag "stackZ")

  The positioning of volumes proceeds via elements:

         axisPos    : a single volume is added to the pile. A
                      rotation (one angle) along the same axis as well as
                      a transverse displacement may also be specified.

         axisMPos   : a multiple position of a given volume. A
                      rotation (one angle) along the same axis as well as
                      a transverse displacement (both applicable to all copies) 
                      may also be specified.

         Offsets along the stack axis can be specified either using 

         a shift : distance between the coordinate origin of the stack and the
                   coordinate origin of the first stacked volume, or between
                   the coordinate origin of the previously stacked volume and
		   the coordinate origin of the first stacked volume.

         a gap   : distance between the coordinate origin of the stack and the
                   lowest dimension of the first stacked volume, or between the
                   highest dimension of the previously stacked volume and the
                   lowest dimension of the first stacked volume.


     Coordinate system: The coordinate system of the stack can be
                        defined in two ways, that are selected by 
                        the attribute 'origin'.
 
        origin="atStart" (default)
                        The coordinate-system of the stack is defined before
                        any volumes are positioned in the stack, and
                        it is fixed (i.e. independent of the contents
                        of the stack).
                        For example, in the absence of the gap0 or
                        shift0 attributes, the origin of the
                        coordinate system coincides with the edge of
                        the stack.

        origin="atCenter"   After the stack is built an additional shift
                        along the direction axis is applied to the
                        coordinate system of the stack, such that it
                        lies in the center of the stack (including
                        gaps). The 'center' is defined as the
                        geometric middle between two planes
                        perpendicular to the direction axis, with the
                        planes just touching the extreme edges of the
                        stack (which include gaps).  Note that the
                        coordinate system always lies on the direction
                        axis, and does not change in the perpendicular
                        direction.  
                        To avoid ambiguities when gap0 is smaller than zero:
                        Define point A at the "stack start" (from which gap0 is 
                        measured), and define the last physical part of the
			stack as B. The center of the stack is then defined at 
                        position (A+B)/2.  In the simple case of zero gap0
                        and shift0, the coordinate sytem is shifted to
                        the center of the stack of volumes.
 

1.4.4) Boolean volumes (union, intersection and subtraction)
============================================================
   NOTE: Boolean volumes are not currently supported by HDFast or HDGeant.

     union        : Union of several volumes

     intersection : Intersection of several volumes

     subtraction  : Subtraction of several volumes. All the volumes 
                    (but the first) are substracted from the first

   The positioning of volumes within boolean operation can only be
   done via single positioners, say:

       posXYZ
       posRPhiZ

   Note that it is required that the materials of the boolean volumes
   are identical. This is however not checked (or forced) within the
   XML syntax, and is left to the responsibility of the user (and the
   application).


1.5) Positioning of volumes
===========================

   Each volume (Solid volumes, compositions, unions, etc) are
   positioned relatively to other volumes using the "position"
   elements. A given volume may referenced (through its name) in
   several position operations.

   Position operators are organized as a hierarchy of types as follows

         Single positions
           | posXYZ
           | posRPhiZ
         Multiple positions
           | mposR
           | mposPhi
           | mposX
           | mposY
           | mposZ
         Axis positions
           | axisPos
           | axisMPos

    o Single positions can be used in compositions or boolean volumes

    o Multiple positions can only be used in compositions

    o Axis positions can only be used in stacks


1.5.1) Common properties


   All positioning operators share some properties :

     attributes :

        volume      : the volume they are positioning.
        units       : the units used to specify the coordinates.

     member elements :

        identifiers : a set of identifier specifications (see paragraph on 
                      identifiers for details)


   Single positions and Multiple positions may provide a local rotation 
   (specified as three angles around X, Y and Z)

   The rotation around X,Y,Z axis is defined by rot="a b c"
          the X rotation of a angle is done first 
          the Y rotation of b angle is done second 
          the Z rotation of c angle is done last.


1.5.1.1) posXYZ


     posXYZ: single positioning of a 'generic' volume, in carthesians
             coordinates.
             The coordinate system is implicitly defined by the
             posXYZ (take a coordinate system, and place the volume in
             it with a given set of coordinates and rotations)

      specific attributes:

      X_Y_Z : X, Y and Z coordinates of the volume inside the
              coordinate system   
          The volume is rotated before it is placed.

1.5.1.2) posRPhiZ


      posRPhiZ: single positioning of a 'generic' volume, in cylindrical
                coordinates.

      specific attributes:

      R_Phi_Z : Radius, Phi (wrt the X-axis) and Z of the volume
                (default is 0 0 0).
      S       : Move along the "ortho-radial" coordinate S 
                before placing the object (default is 0).
      impliedRot : (true | false) rotation of volumes to point to center
                coordinate system (true) or not (false).
       
      The volume is rotated before it is placed.
        
1.5.1.3) mposPhi


      mposPhi: multiple positioning of a 'generic' volume, around the
               Z-axis at a given radius R, with incremental values of phi.

      specific attributes:

      ncopy : Number of volumes to be placed
      Phi0  : Start value of phi (wrt the x-axis).
      dPhi  : If given:      incremental value of phi
              If absent:     incremental value of phi is set
                             to 2*PI/ncopy 
      R_Z   : Radius R and Z-coordinate
      S     : Move along the "ortho-radial" coordinate S 
              before placing the objects (default is 0).
      impliedRot : (true | false) rotation of volumes to point to center
              coordinate system (true) or not (false).

1.5.1.4) mposR/X/Y/Z


     mposR, mposX, mposY, mposZ: multiple positioning of volumes along
                                 the R, X, Y, Z directions respectively.

     mposR:  positioning along the radius R with fixed (Z,phi). 
     mposX:  positioning along the X-axis with fixed (Y,Z). 
     mposY:  positioning along the Y-axis with fixed (X,Z). 
     mposZ:  positioning along the Z-axis with fixed (R,phi) or (X,Y). 

     ncopy      : Number of volumes to be placed
     R0,X0,Y0,Z0: Starting values in R,X,Y,Z
     dR,dX,dY,dZ: Increment values in R,X,Y,Z
     Z_Phi      : transverse displacement for mposR
     R_Phi      : transverse displacement for mposZ
     X_Y        : transverse displacement for mposZ (alternate for R_Phi)
     Y_Z        : transverse displacement for mposX
     Z_X        : transverse displacement for mposY
     S          : Move along the "ortho-radial" coordinate S 
                  before placing the objects.

     Note that the origin of the coordinate system is implicitly
     defined in the 'transverse' direction by the Z_Phi, R_phi, X_Y, Y_Z or Z_X
     attributes. In the positioning-direction it is defined by the
     attributes R0, X0, Y0 or Z0. 

1.6) Identifiers
================

    Identifiers provide for a generalized identification scheme of
    positioned volumes in the detector. Identifier are specified as
    member elements attached to any position operator.

    Generally, an identifier is composed of a set of numbers such as

      /1/3/4/5/1/34

    The meaning of each field is conventional and reflects the local
    hierarchy of volumes.

    The identifier elements permit to freely specify which field(s)
    will be affected by the positioning operation. When single
    positioning is used, a single value of one or several fields will
    be affected by the operation. When a multiple positioning
    operation is considered, one or several fields will be iteratively
    affected. In this case, it is possible to follow the iteration by
    specifying a first value and a step used to compute iterated field
    values.

    Attributes :

    field      : a symbolic name characterizing the affected field. Legal names
                 should be conventionally specified. Currently six symbols
		 have been introduced :

		 row    (typically Y in rectangular arrays)
		 column (typically X in rectangular arrays)
                 layer  (typically R in barrels and Z in end-caps)
                 ring   (typically Z in barrels and R in end-caps)
                 sector (typically Phi in barrels)
                 plane  (typically Z in stacks)
		 module (generic)
		 cell   (generic)

    value        the exact value to be entered in single positioning or
                 the first value in multiple positiong.

    step         only used in multi-positioning.

1.7) Special models
====================

   Special elements may be defined to enable the maintenance of geometry
   information that is specific to a certain application.  This information
   should be kept together in the document with the generic geometric model
   specification in terms of solids, stacks and compositions.  This will
   facilitate the maintenance of a coordinated geometry model for all 
   applications. 

1.7.1) mcfast
=============

   The mcfast element specifies a mcfast model for a detector section.
   These entries are used to construct a valid mcfast geometry database
   from the geometry specification.  The content of an mcfast element is
   the same as a parameters element.  An mcfast element can also contain
   other mcfast elements.  The parameters defined at an outer level in the
   heirarchy become default values for elements contained within that level.
   An external parameters block can also be specified as an attribute to the
   mcfast element, whose contents serve as default values for the mcfast
   block.  The evaluation of parameters proceeds from outside in, and any
   parameter appearing more than once takes its value from the last occurrence.

   All values needed to fill out the mcfast template (see HDFast documentation)
   must be specified at least once.  This is up to the user to ensure, since
   the mcfast database specification is not xml-compliant and cannot be
   checked in validating this document.

   mcfast attributes:

   model	: a symbolic name from a list of valid mcfast detector types.
   template:	: the string "db/aaaa.db" where aaaa is the mcfast template
		  file corresponding to the model.  These two are required.
   parameters	: the name of a parameters element containing a subset of the
		  definitions required by the model template.  The rest of the
		  necessary parameters must appear as content (see below).

   mcfast content:

   | int
   | real
   | string
   | reference
   | int_array
   | real_array
   | string_vector
   | reference_vector
   mcfast	: one or more other mcfast blocks

2) Some examples showing typical usage of different elements
============================================================

   (note that these examples are generally extracted from more
   complete definitions. Therefore they are not expected to be
   complete and compilable, since some references may not be shown)

2.1) Using compositions and identifiers


<composition  name="MU_Stat_BML1">
   <posXYZ  volume="MU_BML1_RPC1"  X_Y_Z="  0        0  0">  <layer value=" 1" />  </posXYZ>
   <posXYZ  volume="MU_BML1_MDT1"  X_Y_Z="130.       0  0">  <layer value=" 2" />  </posXYZ>
   <posXYZ  volume="MU_BML1_SPA1"  X_Y_Z="336.98 -1700. 0">  <layer value=" 3" />  </posXYZ>
   <posXYZ  volume="MU_BML1_SPA1"  X_Y_Z="336.98     0  0">  <layer value="13" />  </posXYZ>
   <posXYZ  volume="MU_BML1_SPA1"  X_Y_Z="336.98  1700. 0">  <layer value="23" />  </posXYZ>
   <posXYZ  volume="MU_BML1_MDT2"  X_Y_Z="543.96     0  0">  <layer value=" 4" />  </posXYZ>
   <posXYZ  volume="MU_BML1_RPC1"  X_Y_Z="673.96     0  0">  <layer value=" 5" />  </posXYZ>
</composition>

<composition  name="MU_Barrel">
   <mposPhi volume="MU_Stat_BML1"  ncopy="8"  R_Z="6730.54  150.">  
      <ring   value="1" step="1" />
      <sector value="1" />
   </mposPhi>
   <mposPhi volume="MU_Stat_BML1"  ncopy="8"  R_Z="6730.54 1610.">
      <ring   value="1" step="1" />
      <sector value="2" />
   </mposPhi>
   <mposPhi volume="MU_Stat_BML1"  ncopy="8"  R_Z="6730.54 3070.">
      <ring   value="1" step="1" />
      <sector value="3" />
   </mposPhi>
   <mposPhi volume="MU_Stat_BML1"  ncopy="5"  R_Z="6730.54 4530." dPhi="45.">
      <ring   value="1" step="1" />
      <sector value="4" />
   </mposPhi>
   <posRPhiZ volume="MU_Stat_BML1" R_Phi_Z="6730.54 270. 4530.">
      <ring   value="1" step="1" />
      <sector value="7" />
   </posRPhiZ>
</composition>


2.2) Using parameters

    
<box  name="MU_BML1_MDT1" X_Y_Z="96.96 3580. 1440." material="Air"> 
  <real name="layers"              value="3"    unit="none"   comment="number of layers" />
  <real name="radiative_thickness" value="0.80" unit="cm"     comment="total radiative thickness" />
  <real_array name="dimensions"    values="30. 55.98 81.96" unit="cm" />
  <real_array name="z_positions"   values="30. 14.60 96.96" unit="cm" comment="z positions of layers" />
  <real_array name="x_positions"   values="15. 30. 15."     unit="cm" comment="x positions of first tube of each layer" />
</box>

<box  name="MU_BML1_RPC1" X_Y_Z="100.  3440. 1440." material="Honeycomb"> 
   <reference value="inner_RPC_1" /> 
</box>

2.3) Parameter complete syntax

<real   name="..." comment="..." value="..." unit="..."/>
<string name="..." comment="..." value="..." />

<reference name="..."  comment="..."  value="..." /> 
                                  (refers to a named parameter block)

<real_array    name="..." comment="..." values="... ... ..." unit="..."/>

<string_vector name="..." comment="...">
   <string_data value="..." />
   <string_data value="..." />
   <string_data value="..." />
</string_vector>

<reference_vector name="..." comment="...">
   <reference_data value="..." />
   <reference_data value="..." />
   <reference_data value="..." />
</reference_vector>

<parameters name="..." type="...">
   <real ..../>
   etc...
</parameters>

2.4) Using Axis compositions


<stackX name="MU_RPC1_LongStrips">
  <axisMPos volume="MU_RPC1_LongStrip" ncopy="96" gap0="2.6" shift="30.8"/>
</stackX>

<stackZ name="MU_RPC1_TranStrips">
  <axisMPos volume="MU_RPC1_TranStrip" ncopy="32" gap0="1.0" shift="30.0"/>
</stackZ>

<composition name="MU_RPC1_LongStripPanel">
  <posXYZ volume="MU_RPC1_StripPanel" />
  <posXYZ volume="MU_RPC1_LongStrips"  X_Y_Z="0 -1.48 0" />
</composition>

<composition name="MU_RPC1_TranStripPanel">
  <posXYZ volume="MU_RPC1_StripPanel" />
  <posXYZ volume="MU_RPC1_TranStrips"  X_Y_Z="0  1.48 0" />
</composition>

<stackY name="MU_RPC1_LowerActive">
  <axisPos volume="MU_RPC1_TranStripPanel" />
  <axisPos volume="MU_RPC1_Bakelite"       />
  <axisPos volume="MU_RPC1_GasGap"         />
  <axisPos volume="MU_RPC1_Bakelite"       />
  <axisPos volume="MU_RPC1_LongStripPanel" />
</stackY>

<stackY name="MU_RPC1_UpperActive">
  <axisPos volume="MU_RPC1_TranStripPanel" />
  <axisPos volume="MU_RPC1_Bakelite"       />
  <axisPos volume="MU_RPC1_GasGap"         />
  <axisPos volume="MU_RPC1_Bakelite"       />
  <axisPos volume="MU_RPC1_LongStripPanel" />
</stackY>

2.5) Using the polycone:

<pcon name="TEST_polycone" material="Air">
    <polyplane Rio_Z="0 10 0"  />
    <polyplane Rio_Z="2 20 10" />
    <polyplane Rio_Z="0 10 50" /> 
</pcon>


(end of the documentation) -->



<!ENTITY % DTD_constraint 'DTD_version ( v1 ) #REQUIRED'>

<!ELEMENT  HDDS     ( materials | section )+>
<!ATTLIST  HDDS
           %DTD_constraint;>


<!ELEMENT  section  ( box | trd | tubs | cons | pcon | 
                      union | intersection | subtraction |
                      composition |
                      stackX | stackY | stackZ |
                      parameters | mcfast )+>
 
<!ATTLIST  section
           name       CDATA  #REQUIRED 
           version    CDATA  #REQUIRED
           date       CDATA  #REQUIRED
           author     CDATA  #REQUIRED
           top_volume IDREF  #REQUIRED
           %DTD_constraint;>
           
<!ENTITY % units 'unit_length  ( cm  | mm  | m )    "cm"
                  unit_angle   ( deg | mrad ) "deg"'>

<!ELEMENT identifier EMPTY>

<!ATTLIST identifier field  CDATA  #REQUIRED
                     value  CDATA  "0"
                     step   CDATA  "0">

<!--

    The "layer", "ring" and "sector" ... elements are short cuts for
identifiers with corresponding field names.

-->

<!ELEMENT layer EMPTY>

<!ATTLIST layer field  (layer) "layer"
                value  CDATA  "0"
                step   CDATA  "0">

<!ELEMENT ring EMPTY>

<!ATTLIST ring  field  (ring) "ring"
                value  CDATA  "0"
                step   CDATA  "0">

<!ELEMENT sector EMPTY>

<!ATTLIST sector field  (sector) "sector"
                 value  CDATA  "0"
                 step   CDATA  "0">

<!ELEMENT column EMPTY>

<!ATTLIST column field  (column) "column"
                 value  CDATA  "0"
                 step   CDATA  "0">

<!ELEMENT row    EMPTY>

<!ATTLIST row    field  (row) "row"
                 value  CDATA  "0"
                 step   CDATA  "0">

<!ELEMENT module EMPTY>

<!ATTLIST module field  (module) "module"
                 value  CDATA  "0"
                 step   CDATA  "0">

<!ELEMENT cell EMPTY>

<!ATTLIST cell  field  (cell) "cell"
                 value  CDATA  "0"
                 step   CDATA  "0">

<!ELEMENT plane EMPTY>

<!ATTLIST plane field  (plane) "plane"
                 value  CDATA  "0"
                 step   CDATA  "0">

<!ENTITY % any_identifier 'layer | ring | sector | row | column |
			   module | cell | plane | identifier'>

<!ENTITY % volume_properties 'name        ID               #REQUIRED
                              parameters  IDREF            #IMPLIED'>

<!ENTITY % solid_properties '%volume_properties;
                             material    IDREF            #REQUIRED
                             sensitive   ( true | false ) "false"
                             comment	 CDATA		  #IMPLIED'>

<!ELEMENT  box    EMPTY >
<!ATTLIST  box
           X_Y_Z       CDATA     #REQUIRED
           %solid_properties;
           %units;>

<!ELEMENT  trd    EMPTY >
<!ATTLIST  trd
           Xmp_Ymp_Z   CDATA     #REQUIRED
           inclination CDATA     "0 0"
           %solid_properties;
           %units;>

<!ELEMENT  tubs   EMPTY >
<!ATTLIST  tubs
           Rio_Z    CDATA    #REQUIRED
           profile  CDATA     "0 360"
           %solid_properties;
           %units;>

<!ELEMENT  cons   EMPTY >
<!ATTLIST  cons
           Rio1_Rio2_Z     CDATA     #REQUIRED
           profile         CDATA     "0 360"
           %solid_properties;
           %units;>

<!ELEMENT  pcon   (polyplane+)>
<!ATTLIST  pcon
           profile         CDATA     "0 360"
           %solid_properties;
           %units;>

<!ELEMENT  polyplane EMPTY >
<!ATTLIST  polyplane
           Rio_Z           CDATA     #REQUIRED>


<!ENTITY % any_position      ' posXYZ | posRPhiZ | mposR | mposPhi | mposX | mposY | mposZ '>

<!ELEMENT  composition     ( %any_position; )+ >
<!ATTLIST  composition    
           %volume_properties;
           envelope   IDREF   #IMPLIED>

<!ENTITY % any_relative_position ' axisPos | axisMPos '>

<!ELEMENT  stackX      ( %any_relative_position; )+ >
<!ATTLIST  stackX
           origin      (atStart|atCenter)    "atStart"
           %volume_properties;>

<!ELEMENT  stackY      ( %any_relative_position; )+ >
<!ATTLIST  stackY
           origin      (atStart|atCenter)    "atStart"
           %volume_properties;>

<!ELEMENT  stackZ      ( %any_relative_position; )+ >
<!ATTLIST  stackZ
           origin      (atStart|atCenter)    "atStart"
           %volume_properties;>

<!ENTITY % any_single_position ' posXYZ | posRPhiZ '>

<!ELEMENT  union     ( %any_single_position; )+ >
<!ATTLIST  union    
           %volume_properties;>

<!ELEMENT  intersection ( %any_single_position; )+ >
<!ATTLIST  intersection
           %volume_properties;>

<!ELEMENT  subtraction  ( %any_single_position; )+ >
<!ATTLIST  subtraction
           %volume_properties;>

<!ENTITY  % any_parameter 'int        | int_array       |
                           real       | real_array      |
                           string     | string_vector   |
                           reference  | reference_vector'>

<!ELEMENT  parameters ( %any_parameter; )* >
<!ATTLIST  parameters
           name      ID      #REQUIRED
           type      CDATA   #REQUIRED>

<!ENTITY  % parameter_properties 'name      CDATA #IMPLIED
                                  comment   CDATA #IMPLIED'>

<!ELEMENT  int    EMPTY>
<!ATTLIST  int
           %parameter_properties;
           value       CDATA	#REQUIRED>

<!ELEMENT  real   EMPTY>
<!ATTLIST  real
           %parameter_properties;
           value       CDATA            #REQUIRED
           unit        ( m | cm | mm | 
                         deg | rad | mrad |
                         MeV | GeV | MeVcgm | cgm |
                         T | percent | none )  #REQUIRED>

<!ELEMENT  string EMPTY>
<!ATTLIST  string 
           %parameter_properties;
           value        CDATA     #REQUIRED>

<!ELEMENT  reference EMPTY>
<!ATTLIST  reference
           %parameter_properties;
           value        IDREF     #REQUIRED>


<!ELEMENT  string_data  EMPTY>
<!ATTLIST  string_data
           value       CDATA     #REQUIRED
           comment     CDATA     #IMPLIED>

<!ELEMENT  reference_data  EMPTY>
<!ATTLIST  reference_data
           value       IDREF     #REQUIRED
           comment     CDATA     #IMPLIED>

<!ELEMENT  int_array  EMPTY >
<!ATTLIST  int_array
           %parameter_properties;
           values	CDATA	#REQUIRED>

<!ELEMENT  real_array EMPTY >
<!ATTLIST  real_array
           %parameter_properties;
           values        CDATA   #REQUIRED
           unit        ( m | cm | mm | 
                         deg | rad | mrad |
                         MeV | GeV | MeVcgm | cgm |
                         T | percent | none )  #REQUIRED>

<!ELEMENT  string_vector ( string_data )+ >
<!ATTLIST  string_vector
           %parameter_properties;>

<!ELEMENT  reference_vector ( reference_data )+ >
<!ATTLIST  reference_vector
           %parameter_properties;>

<!ENTITY % position_properties 'volume    IDREF    #REQUIRED
                                rot       CDATA    "0 0 0"
                                S         CDATA    "0"
                                %units; '>
           
<!ELEMENT  posXYZ ( %any_identifier; )* >
<!ATTLIST  posXYZ
           X_Y_Z     CDATA    "0 0 0"
           %position_properties;>

<!ELEMENT  posRPhiZ ( %any_identifier; )* >
<!ATTLIST  posRPhiZ
           R_Phi_Z   CDATA    "0 0 0"
           impliedRot (true | false) "true"
           %position_properties;>

<!ELEMENT  mposPhi ( %any_identifier; )* >
<!ATTLIST  mposPhi
           ncopy     CDATA    #REQUIRED
           Phi0      CDATA    "0"                     
           dPhi      CDATA    #IMPLIED 
           R_Z       CDATA    "0 0"
           impliedRot (true | false) "true"
           %position_properties;>

<!ELEMENT  mposR ( %any_identifier; )* >
<!ATTLIST  mposR
           ncopy     CDATA    #REQUIRED
           R0        CDATA    "0"
           dR        CDATA    #REQUIRED
           Z_Phi     CDATA    "0 0"   
           %position_properties;>

<!ELEMENT  mposX ( %any_identifier; )* >
<!ATTLIST  mposX
           ncopy     CDATA    #REQUIRED
           X0        CDATA    "0"
           dX        CDATA    #REQUIRED
           Y_Z       CDATA    "0 0"   
           %position_properties;>

<!ELEMENT  mposY ( %any_identifier; )* >
<!ATTLIST  mposY
           ncopy     CDATA    #REQUIRED
           Y0        CDATA    "0"
           dY        CDATA    #REQUIRED
           Z_X       CDATA    "0 0"   
           %position_properties;>

<!ELEMENT  mposZ ( %any_identifier; )* >
<!ATTLIST  mposZ
           ncopy     CDATA    #REQUIRED
           Z0        CDATA    "0"
           dZ        CDATA    #REQUIRED
           R_Phi     CDATA    "0 0"   
           X_Y       CDATA    "0 0"   
           %position_properties;>


<!ENTITY % relative_position_properties 'volume    IDREF    #REQUIRED
                                         dX        CDATA    "0"
                                         dY        CDATA    "0"
                                         dZ        CDATA    "0"
                                         rotation  CDATA    "0"
                                         %units; '>

<!ELEMENT  axisPos ( %any_identifier; )* >
<!ATTLIST  axisPos
           shift     CDATA    "0"
           gap       CDATA    "0"
           %relative_position_properties;>
           
<!ELEMENT  axisMPos ( %any_identifier; )* >
<!ATTLIST  axisMPos
           ncopy     CDATA    #REQUIRED
           shift0    CDATA    "0"
           gap0      CDATA    "0"
           shift     CDATA    "0"
           gap       CDATA    "0"
           %relative_position_properties;>
           
<!ELEMENT  materials ( element | composite )+> 
<!ATTLIST  materials
           version      CDATA   #REQUIRED
           date         CDATA   #REQUIRED
           author       CDATA   #REQUIRED
           %DTD_constraint;>

<!ELEMENT  element  ( %any_parameter; )*>
<!ATTLIST  element 
           symbol    CDATA  #IMPLIED
           name      ID     #REQUIRED
           z         CDATA  #REQUIRED
           a         CDATA  #REQUIRED>

<!ELEMENT  composite ( (addmaterial)+ , ( %any_parameter; )* )>
<!ATTLIST  composite
           name     ID     #REQUIRED>

<!ELEMENT  addmaterial  ( fractionmass | natoms ) >
<!ATTLIST  addmaterial
           material     IDREF  #REQUIRED
>

<!ELEMENT fractionmass EMPTY>
<!ATTLIST fractionmass
          fraction      CDATA #REQUIRED
>

<!ELEMENT natoms EMPTY>
<!ATTLIST natoms
          n             CDATA #REQUIRED
>

<!ELEMENT  mcfast ( ( %any_parameter; )* , ( mcfast )* )>
<!ATTLIST  mcfast
           model	CDATA	#REQUIRED
           template	CDATA	#REQUIRED
           parameters	IDREF	#IMPLIED>



